var documenterSearchIndex = {"docs":
[{"location":"#Criminos.jl","page":"Home","title":"Criminos.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Criminos.jl is a Julia implementation accompanying the paper. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nnot finished yet.","category":"page"},{"location":"alg/#The-Incentive-Deterrence-Model","page":"Algorithm Reference","title":"The Incentive-Deterrence Model","text":"","category":"section"},{"location":"alg/#Basics","page":"Algorithm Reference","title":"Basics","text":"","category":"section"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"The dynamics of the system is,","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"leftbeginarrayll\n    y_t+1     = varphi_t+1(x_t y_t tau)         \n    x_t+1  = Gamma x_k - hatGamma y_t+1 + lambda_t\nendarrayright","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"The main fixed-point iteration is at,","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Criminos.F","category":"page"},{"location":"alg/#Criminos.F","page":"Algorithm Reference","title":"Criminos.F","text":"F(Œ®::BidiagSys, z::MarkovState; f‚Çò=Criminos.linear_mixin)\n\nCompute the fixed-point iteration given the BidiagSys Œ® and MarkovState z.\n\nArguments\n\nŒ®::BidiagSys: The BidiagSys object.\nz::MarkovState: The MarkovState object.\nf‚Çò=Criminos.linear_mixin: The mixin function.\n\nReturns\n\nAn array containing the values of z=F(z).\n\n\n\n\n\n","category":"function"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"We define two data structs:","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"the system struct, Psi, to store constants\nthe state variable, z, for (xy) in the math, and attributes to enable efficient computations üòç ","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Criminos.BidiagSys","category":"page"},{"location":"alg/#Criminos.BidiagSys","page":"Algorithm Reference","title":"Criminos.BidiagSys","text":"mutable struct BidiagSys{Tx,Tm}\n\nBidiagonal system in the paper.\n\nFields\n\nn::Int: Number of states.\nŒ≥::Tx: Rate retention.\nŒª::Tx: Rate arrival.\nq::Tx: Probability.\nM::Tm: Helper matrix.\nQ::Tm: Helper matrix.\nŒì::Tm: Helper matrix.\nŒì‚Çï::Tm: Helper matrix.\nstyle::Symbol: Random or known.\n\nConstructors\n\nBidiagSys(n::Int; style=:rand): Constructs a BidiagSys object with the specified number of states n and style style.\n\n\n\n\n\n","category":"type"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Criminos.MarkovState","category":"page"},{"location":"alg/#Criminos.MarkovState","page":"Algorithm Reference","title":"Criminos.MarkovState","text":"struct MarkovState{R,Tx}\n\nA mutable struct representing the state of a Markov-type Dynamical system\n\nFields\n\nk::Int: The iteration number.\nn::Int: The number of states.\nz::Tx: The fix-point iterate.\nx::Tx: The iterate.\nœÅ::Tx: The probability.\ny::Tx: The recidivists.\ny‚Çã::Tx: The previous recidivists.\nœÑ::Tx: The treatment probability.\nf::Real: The objective value of the mixed-in function.\n\nConstructors\n\nMarkovState(k, n::Int; z=[Random.rand(Float64, n); Random.rand(Float64, n)], œÑ=Random.rand(Float64, n), Œ≤::Real=1.0): Constructs a MarkovState object with the given parameters.\n\n\n\n\n\n","category":"type"},{"location":"alg/#Dynamics-of-x","page":"Algorithm Reference","title":"Dynamics of x","text":"","category":"section"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"The x part is simple,","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Criminos.F‚Çì","category":"page"},{"location":"alg/#Criminos.F‚Çì","page":"Algorithm Reference","title":"Criminos.F‚Çì","text":"population dynamics x\n\n\n\n\n\n","category":"function"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"x_t+1 = Gamma x_t - hatGamma y_t + lambda_t","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"In this view, we use Psi","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"quad Gamma =mathrmdiag(gamma) quad hat Gamma =\nbeginbmatrix\n    gamma_0   0         cdots         0            \n    -gamma_0  gamma_1  cdots         0            \n    vdots     ddots    ddots         vdots       \n    0          cdots    -gamma_N-2  gamma_N-1\nendbmatrix","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"such that we call the bi-diagonal system.  The associated \"potential\" or Lynapunov function is,","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"u(x y) = frac12(x)^T(I - Gamma)x - (lambda)^T x + (x)^T hatGamma y","category":"page"},{"location":"alg/#Adversarial-Energy,-and-Best-Response","page":"Algorithm Reference","title":"Adversarial Energy, and Best Response","text":"","category":"section"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Note varphi of y follows the utility/potential/energy omega.","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Criminos.w","category":"page"},{"location":"alg/#Criminos.w","page":"Algorithm Reference","title":"Criminos.w","text":"linear quadratic function\n\n\n\n\n\n","category":"function"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Criminos.mixed_in_gnep_best!","category":"page"},{"location":"alg/#Criminos.mixed_in_gnep_best!","page":"Algorithm Reference","title":"Criminos.mixed_in_gnep_best!","text":"best response for the GNEP problem \n```math\ny \\in [0, x_{k+1}]\n```\n\n\n\n\n\n","category":"function"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Criminos.mixed_in_gnep_grad!","category":"page"},{"location":"alg/#Criminos.mixed_in_gnep_grad!","page":"Algorithm Reference","title":"Criminos.mixed_in_gnep_grad!","text":"\"better\" response for the GNEP problem \n```math\ny \\in [0, x_{k+1}]\n```\n\n\n\n\n\n","category":"function"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"we take arguments ","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"‚àá‚ÇÄ, H‚ÇÄ, ‚àá‚Çú, H‚Çú, _... = args","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"for any ytau, compute c from the exogenous arrivals","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"c = Qlambda","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"the deterrence & incentives","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"beginaligned\nnabla^2omega = operatornamediag(tau) cdot H_t cdot operatornamediag(tau) + H_0 \nnablaomega = (nabla^2omega) y + underbracenabla_t tau - nabla_0 c_g + hat Gamma^Tx\nendaligned","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"and finally","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"omega(ytau) = frac12y^T (nabla^2omega) y + y^T left(nabla_t tau - nabla_0 cright) + y^That Gamma^Tx","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"note: Note\nOne can see tau is crucial to compute the second-order derivatives. If tau = 0, this reduce to H_0 nabla_0 c... This can be taken as intrinsic property of a subpopulation","category":"page"},{"location":"alg/#Extension-to-Multiple-Subpopulation","page":"Algorithm Reference","title":"Extension to Multiple Subpopulation","text":"","category":"section"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"For multiple population, nu = 0 M-1, now omega has multiple blocks, y^0 ldots y^nu ldots y^M-1, stick to the parameterization,","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"g^nu = nabla^nu_t tau^nu - nabla^nu_0 c^nu","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Then the energy can we rewritten as,","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"beginaligned\n    omega(y x tau) = \n    y^T beginbmatrix\n            (hatGamma^0)^T x^0 \n            vdots \n            (hatGamma^M-1)^T x^M-1 \n        endbmatrix +\n    y^T beginbmatrix\n        g^0 \n        vdots \n        g^M-1 \n    endbmatrix +\n\n    frac12 y^T beginbmatrix\n                       H^1        cdots  H^1M-1 \n                       vdots     ddots  vdots    \n                       H^M-11  cdots  H^M-1   \n                     endbmatrix y\nendaligned","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"note: Note\nIf H_t^ij neq 0, then the recidivism of i is affected by the recidivism of j.","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"Population is still independent,","category":"page"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"forall nu quad u^nu(x^nu y_k^nu) = frac12(x^nu)^T(I - Gamma^nu)x^nu - (lambda^nu)^T x^nu + (x^nu)^T hatGamma^nu y_k^nu","category":"page"},{"location":"alg/#Index","page":"Algorithm Reference","title":"Index","text":"","category":"section"},{"location":"alg/","page":"Algorithm Reference","title":"Algorithm Reference","text":"","category":"page"}]
}
